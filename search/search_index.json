{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Silimate Platform Docs This is the documentation website for the Silimate Platform. For any questions, comments, or concerns, please contact support via Slack/ email . Philosophies Dependencies should be managed properly: ensure dependencies are met before running something Inputs: (1) Tool and version, (2) Tool settings/knobs (3) Design collateral, (4) Script template Outputs: (1) Design collateral, (2) Log(s), (3) Metrics Logs and metrics are automatically warehoused Settings/knobs can be overridden as needed Intuitive user interfaces are important: build tools that follow good design principles, so EDA engineers love to use them. Provide intuitive GUI and CLI Don't overcomplicate: most people have simple needs. Either don't implement or hide features that people don't use often Foundry-independence: link foundry files once, auto-reference in each tool Vendor-independence: not linked to any vendor-specific flow Transparency: users should be able to see what is going on under the hood to debug Separation of concerns: tool settings and scripts can be overridden, where USER overrides DESIGN overrides TECH overrides TOOL Quick Setup: Web GUI Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Installation and/or Infrastructure , or contact support via Slack/ email . Port forwarding (recommended) To access the GUI on your local machine, you need to provide an SSH tunnel into the CAD server with port forwarding . To do this, add the argument -L 80:192.168.49.2:80 to your ssh command, for example: sudo ssh -Y -i testing_ec2.pem -L 80:192.168.49.2:80 ec2-user@ec2-XX-XX-X-XXX.us-west-2.compute.amazonaws.com NOTE: you may need root privileges on your local machine to forward to port 80, hence sudo in the above command. Now, you should be able to navigate to http://localhost on your local browser and the platform web GUI should appear. X11 forwarding/VNC Assuming you have X11 forwarding/VNC setup between your local machine and the CAD server, you may simply open a remote browser session (e.g., firefox ) and navigate to http://192.168.49.2 . NOTE: this approach will likely be less responsive than port forwarding, hence not recommended. Quick Setup: CLI Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Installation and/or Infrastructure , or contact support via Slack/ email . CAD Server Setup Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=192.168.49.2 export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:/silimate/cli Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active) Local Machine Setup Make sure that SSH port forwarding is set up correctly. See Quick Setup: Web GUI Clone the CLI to your local machine path <CLI_DIRECTORY> (wherever you desire): git clone https://github.com/silimate/cli/ <CLI_DIRECTORY> Ensure the first line of <CLI_DIRECTORY>/smake points to your python3 interpreter path, e.g.: #!/usr/local/bin/python3 Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=localhost export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:<CLI_DIRECTORY> Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"Home"},{"location":"#welcome-to-silimate-platform-docs","text":"This is the documentation website for the Silimate Platform. For any questions, comments, or concerns, please contact support via Slack/ email .","title":"Welcome to Silimate Platform Docs"},{"location":"#philosophies","text":"Dependencies should be managed properly: ensure dependencies are met before running something Inputs: (1) Tool and version, (2) Tool settings/knobs (3) Design collateral, (4) Script template Outputs: (1) Design collateral, (2) Log(s), (3) Metrics Logs and metrics are automatically warehoused Settings/knobs can be overridden as needed Intuitive user interfaces are important: build tools that follow good design principles, so EDA engineers love to use them. Provide intuitive GUI and CLI Don't overcomplicate: most people have simple needs. Either don't implement or hide features that people don't use often Foundry-independence: link foundry files once, auto-reference in each tool Vendor-independence: not linked to any vendor-specific flow Transparency: users should be able to see what is going on under the hood to debug Separation of concerns: tool settings and scripts can be overridden, where USER overrides DESIGN overrides TECH overrides TOOL","title":"Philosophies"},{"location":"#quick-setup-web-gui","text":"Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Installation and/or Infrastructure , or contact support via Slack/ email .","title":"Quick Setup: Web GUI"},{"location":"#port-forwarding-recommended","text":"To access the GUI on your local machine, you need to provide an SSH tunnel into the CAD server with port forwarding . To do this, add the argument -L 80:192.168.49.2:80 to your ssh command, for example: sudo ssh -Y -i testing_ec2.pem -L 80:192.168.49.2:80 ec2-user@ec2-XX-XX-X-XXX.us-west-2.compute.amazonaws.com NOTE: you may need root privileges on your local machine to forward to port 80, hence sudo in the above command. Now, you should be able to navigate to http://localhost on your local browser and the platform web GUI should appear.","title":"Port forwarding (recommended)"},{"location":"#x11-forwardingvnc","text":"Assuming you have X11 forwarding/VNC setup between your local machine and the CAD server, you may simply open a remote browser session (e.g., firefox ) and navigate to http://192.168.49.2 . NOTE: this approach will likely be less responsive than port forwarding, hence not recommended.","title":"X11 forwarding/VNC"},{"location":"#quick-setup-cli","text":"Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Installation and/or Infrastructure , or contact support via Slack/ email .","title":"Quick Setup: CLI"},{"location":"#cad-server-setup","text":"Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=192.168.49.2 export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:/silimate/cli Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"CAD Server Setup"},{"location":"#local-machine-setup","text":"Make sure that SSH port forwarding is set up correctly. See Quick Setup: Web GUI Clone the CLI to your local machine path <CLI_DIRECTORY> (wherever you desire): git clone https://github.com/silimate/cli/ <CLI_DIRECTORY> Ensure the first line of <CLI_DIRECTORY>/smake points to your python3 interpreter path, e.g.: #!/usr/local/bin/python3 Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=localhost export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:<CLI_DIRECTORY> Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"Local Machine Setup"},{"location":"architecture/","text":"Architecture of Silimate Platform","title":"Architecture"},{"location":"architecture/#architecture-of-silimate-platform","text":"","title":"Architecture of Silimate Platform"},{"location":"built-in-steps/","text":"Built-In Steps: Descriptions Inputs Input steps have mappings. File(s) from Git File(s) from Disk PDK Setup TSMC22 ARM PDK Setup Logic Synthesis Cadence Genus Flow Setup Cadence Genus Synthesis Flow Cadence Genus Generic Synth Cadence Genus Tech Mapping Cadence Genus Synth Metrics Cadence Genus Synthesis Opt Logs/Metrics Cadence Metrics Import Logs to Database","title":"Built-In Steps"},{"location":"built-in-steps/#built-in-steps-descriptions","text":"","title":"Built-In Steps: Descriptions"},{"location":"built-in-steps/#inputs","text":"Input steps have mappings.","title":"Inputs"},{"location":"built-in-steps/#files-from-git","text":"","title":"File(s) from Git"},{"location":"built-in-steps/#files-from-disk","text":"","title":"File(s) from Disk"},{"location":"built-in-steps/#pdk-setup","text":"","title":"PDK Setup"},{"location":"built-in-steps/#tsmc22-arm-pdk-setup","text":"","title":"TSMC22 ARM PDK Setup"},{"location":"built-in-steps/#logic-synthesis","text":"","title":"Logic Synthesis"},{"location":"built-in-steps/#cadence-genus-flow-setup","text":"","title":"Cadence Genus Flow Setup"},{"location":"built-in-steps/#cadence-genus-synthesis-flow","text":"","title":"Cadence Genus Synthesis Flow"},{"location":"built-in-steps/#cadence-genus-generic-synth","text":"","title":"Cadence Genus Generic Synth"},{"location":"built-in-steps/#cadence-genus-tech-mapping","text":"","title":"Cadence Genus Tech Mapping"},{"location":"built-in-steps/#cadence-genus-synth-metrics","text":"","title":"Cadence Genus Synth Metrics"},{"location":"built-in-steps/#cadence-genus-synthesis-opt","text":"","title":"Cadence Genus Synthesis Opt"},{"location":"built-in-steps/#logsmetrics","text":"","title":"Logs/Metrics"},{"location":"built-in-steps/#cadence-metrics","text":"","title":"Cadence Metrics"},{"location":"built-in-steps/#import-logs-to-database","text":"","title":"Import Logs to Database"},{"location":"cli/","text":"Command-Line Interface (CLI)","title":"CLI"},{"location":"cli/#command-line-interface-cli","text":"","title":"Command-Line Interface (CLI)"},{"location":"dashboards/","text":"Dashboards The platform's dashboarding system","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"The platform's dashboarding system","title":"Dashboards"},{"location":"debug-tools/","text":"Debug Tools","title":"Debug Tools"},{"location":"debug-tools/#debug-tools","text":"","title":"Debug Tools"},{"location":"flow-building/","text":"Flow Building Here, we will discuss building a flow from discrete steps and connecting dependencies to get everything working. Philosophy Flows are composed of a series of steps that can be parametrized. Steps have file/directory inputs, and perform computation on these to yield file/directory outputs that can be routed to other step inputs to form a directed acyclic graph (DAG). Silimate aims to provide a toolbox with the most common EDA tool functionalities encapsulated cleanly. It aims for \"separation of concerns,\" splitting design-specific, PDK-specific, and tool-specific settings into different modules to allow for maximal flow reuse. With this toolbox, simple flows can be quickly constructed and executed, while capturing metrics and design collateral cleanly. Flow Building (Web) We will start with a guide on flow building from the web interface. A description of the generated flow JSON files is in Advanced: Flow Building (Flow Files) . These JSON-based flow files can be developed programmatically as needed for dynamic flow behavior. Create New Flow To create a new flow, click on \"+ Create New\" in the navigation bar. Select \"Flow\" from the dropdown menu. See screenshot above. Saving a Flow Use the \"Save flow\" button in the top panel to save. Step Library The step library is located as a panel on the left-hand side of the flow builder. See screenshot above. Steps are grouped by function based on which EDA stage they are related to. You can click to see which steps are in each category, then drag and drop desired steps onto the flow to create step nodes. Descriptions of the built-in steps are in Built-In Step Descriptions . Connecting Step Dependencies Drag an edge between an output of one step X and an input of another step Y to define a file/directory dependency from step X to Y. If the file names between steps are exactly the same, you can also right-click on a cell which has missing edges and click on \"Autoconnect Inputs\" shortcut to save time. This will try to automatically infer and add edges based on common names between steps. Parametrized Steps Right-click and click on \"Step Settings\" to edit parameters of the step. Double clicking a step will also open the dialog box. Advanced: Flow Building (Flow Files) The best way to understand the flow file structure is to look at one. Flows are located in /silimate/flows/ directory (best practice is to version control this!) and consist of <flow-name>.flow and <flow-name>.pos . <flow-name>.flow { \"nodes\": [ { \"id\": \"log-importer-1692309904268\", \"type\": \"log-importer\" }, { \"id\": \"openroad-metrics-1692309893709\", \"type\": \"openroad-metrics\" }, { \"id\": \"openroad-yosys-synthesis-1692309880919\", \"type\": \"openroad-yosys-synthesis\" }, { \"data\": { \"git_branch\": \"main\", \"git_clone_depth\": \"1\", \"git_commit\": \"HEAD\", \"git_url\": \"https://github.com/silimate/designs\", \"inputMappings\": { \"constraint.sdc\": \"gcd/constraint.sdc\", \"design.v\": \"gcd/gcd.v\" } }, \"id\": \"input-files-from-git-1692309848356\", \"type\": \"input-files-from-git-1692309848356\" } ], \"edges\": [ { \"id\": \"autoconnect__openroad-metrics-1692309893709-synth_stat.rpt-openroad-yosys-synthesis-1692309880919-synth_stat.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"synth_stat.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"synth_stat.rpt\" }, { \"id\": \"autoconnect__openroad-metrics-1692309893709-design.rpt-openroad-yosys-synthesis-1692309880919-design.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"design.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"design.rpt\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-constraint.sdc-input-files-from-git-1692309848356-constraint.sdc\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"constraint.sdc\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"constraint.sdc\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-src/-input-files-from-git-1692309848356-design.v\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"design.v\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"src/\" }, { \"id\": \"reactflow__edge-openroad-yosys-synthesis-16923098809191_1_yosys.log-log-importer-1692309904268<inherit>.log\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"1_1_yosys.log\", \"target\": \"log-importer-1692309904268\", \"targetHandle\": \"<inherit>.log\" } ] } Above, you can see that the .flow file consists of a map with \"nodes\" and \"edges.\" Nodes are steps and edges correspond to links between files/directories across two steps. A node has an \"id\" (a unique identifier for the step), a \"type\" (the step type), and \"data\" (the set of parameters associated with the step). Input steps also define a list of mappings between paths and file/directory names, more details can be found in Input Steps . An edge has an \"id\" (a unique identifier for the dependency), a \"source\" (step providing the dependency), a \"sourceHandle\" (output file/directory being provided), a \"target\" (step receiving the dependency), and a \"targetHandle\" (output ) <flow-name>.pos { \"nodes\": [ { \"width\": 150, \"height\": 64, \"id\": \"log-importer-1692309904268\", \"position\": { \"x\": 585, \"y\": 218 }, \"positionAbsolute\": { \"x\": 585, \"y\": 218 } }, { \"width\": 150, \"height\": 80, \"id\": \"openroad-metrics-1692309893709\", \"position\": { \"x\": 586, \"y\": 326 }, \"positionAbsolute\": { \"x\": 586, \"y\": 326 } }, { \"width\": 150, \"height\": 176, \"id\": \"openroad-yosys-synthesis-1692309880919\", \"position\": { \"x\": 350, \"y\": 200 }, \"positionAbsolute\": { \"x\": 350, \"y\": 200 } }, { \"width\": 150, \"height\": 80, \"id\": \"input-files-from-git-1692309848356\", \"position\": { \"x\": 108, \"y\": 218 }, \"positionAbsolute\": { \"x\": 108, \"y\": 218 } } ], \"viewport\": { \"x\": 7, \"y\": 42, \"zoom\": 1 } } Above, you can see that the .flow file consists of a map with \"nodes\" and a \"viewport.\" The \"nodes\" have the \"id\" (unique identifier of the step), {\"width\", \"height\"} (dimensions of the node), and {\"position\", \"positionAbsolute\"} (relative/absolute position of the node). The node dimensions and position are optional, as they are recomputed on load anyways. The \"viewport\" simply specifies the default zoom and target area.","title":"Flow Building"},{"location":"flow-building/#flow-building","text":"Here, we will discuss building a flow from discrete steps and connecting dependencies to get everything working.","title":"Flow Building"},{"location":"flow-building/#philosophy","text":"Flows are composed of a series of steps that can be parametrized. Steps have file/directory inputs, and perform computation on these to yield file/directory outputs that can be routed to other step inputs to form a directed acyclic graph (DAG). Silimate aims to provide a toolbox with the most common EDA tool functionalities encapsulated cleanly. It aims for \"separation of concerns,\" splitting design-specific, PDK-specific, and tool-specific settings into different modules to allow for maximal flow reuse. With this toolbox, simple flows can be quickly constructed and executed, while capturing metrics and design collateral cleanly.","title":"Philosophy"},{"location":"flow-building/#flow-building-web","text":"We will start with a guide on flow building from the web interface. A description of the generated flow JSON files is in Advanced: Flow Building (Flow Files) . These JSON-based flow files can be developed programmatically as needed for dynamic flow behavior.","title":"Flow Building (Web)"},{"location":"flow-building/#create-new-flow","text":"To create a new flow, click on \"+ Create New\" in the navigation bar. Select \"Flow\" from the dropdown menu. See screenshot above.","title":"Create New Flow"},{"location":"flow-building/#saving-a-flow","text":"Use the \"Save flow\" button in the top panel to save.","title":"Saving a Flow"},{"location":"flow-building/#step-library","text":"The step library is located as a panel on the left-hand side of the flow builder. See screenshot above. Steps are grouped by function based on which EDA stage they are related to. You can click to see which steps are in each category, then drag and drop desired steps onto the flow to create step nodes. Descriptions of the built-in steps are in Built-In Step Descriptions .","title":"Step Library"},{"location":"flow-building/#connecting-step-dependencies","text":"Drag an edge between an output of one step X and an input of another step Y to define a file/directory dependency from step X to Y. If the file names between steps are exactly the same, you can also right-click on a cell which has missing edges and click on \"Autoconnect Inputs\" shortcut to save time. This will try to automatically infer and add edges based on common names between steps.","title":"Connecting Step Dependencies"},{"location":"flow-building/#parametrized-steps","text":"Right-click and click on \"Step Settings\" to edit parameters of the step. Double clicking a step will also open the dialog box.","title":"Parametrized Steps"},{"location":"flow-building/#advanced-flow-building-flow-files","text":"The best way to understand the flow file structure is to look at one. Flows are located in /silimate/flows/ directory (best practice is to version control this!) and consist of <flow-name>.flow and <flow-name>.pos .","title":"Advanced: Flow Building (Flow Files)"},{"location":"flow-building/#flow-nameflow","text":"{ \"nodes\": [ { \"id\": \"log-importer-1692309904268\", \"type\": \"log-importer\" }, { \"id\": \"openroad-metrics-1692309893709\", \"type\": \"openroad-metrics\" }, { \"id\": \"openroad-yosys-synthesis-1692309880919\", \"type\": \"openroad-yosys-synthesis\" }, { \"data\": { \"git_branch\": \"main\", \"git_clone_depth\": \"1\", \"git_commit\": \"HEAD\", \"git_url\": \"https://github.com/silimate/designs\", \"inputMappings\": { \"constraint.sdc\": \"gcd/constraint.sdc\", \"design.v\": \"gcd/gcd.v\" } }, \"id\": \"input-files-from-git-1692309848356\", \"type\": \"input-files-from-git-1692309848356\" } ], \"edges\": [ { \"id\": \"autoconnect__openroad-metrics-1692309893709-synth_stat.rpt-openroad-yosys-synthesis-1692309880919-synth_stat.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"synth_stat.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"synth_stat.rpt\" }, { \"id\": \"autoconnect__openroad-metrics-1692309893709-design.rpt-openroad-yosys-synthesis-1692309880919-design.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"design.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"design.rpt\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-constraint.sdc-input-files-from-git-1692309848356-constraint.sdc\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"constraint.sdc\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"constraint.sdc\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-src/-input-files-from-git-1692309848356-design.v\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"design.v\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"src/\" }, { \"id\": \"reactflow__edge-openroad-yosys-synthesis-16923098809191_1_yosys.log-log-importer-1692309904268<inherit>.log\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"1_1_yosys.log\", \"target\": \"log-importer-1692309904268\", \"targetHandle\": \"<inherit>.log\" } ] } Above, you can see that the .flow file consists of a map with \"nodes\" and \"edges.\" Nodes are steps and edges correspond to links between files/directories across two steps. A node has an \"id\" (a unique identifier for the step), a \"type\" (the step type), and \"data\" (the set of parameters associated with the step). Input steps also define a list of mappings between paths and file/directory names, more details can be found in Input Steps . An edge has an \"id\" (a unique identifier for the dependency), a \"source\" (step providing the dependency), a \"sourceHandle\" (output file/directory being provided), a \"target\" (step receiving the dependency), and a \"targetHandle\" (output )","title":"&lt;flow-name&gt;.flow"},{"location":"flow-building/#flow-namepos","text":"{ \"nodes\": [ { \"width\": 150, \"height\": 64, \"id\": \"log-importer-1692309904268\", \"position\": { \"x\": 585, \"y\": 218 }, \"positionAbsolute\": { \"x\": 585, \"y\": 218 } }, { \"width\": 150, \"height\": 80, \"id\": \"openroad-metrics-1692309893709\", \"position\": { \"x\": 586, \"y\": 326 }, \"positionAbsolute\": { \"x\": 586, \"y\": 326 } }, { \"width\": 150, \"height\": 176, \"id\": \"openroad-yosys-synthesis-1692309880919\", \"position\": { \"x\": 350, \"y\": 200 }, \"positionAbsolute\": { \"x\": 350, \"y\": 200 } }, { \"width\": 150, \"height\": 80, \"id\": \"input-files-from-git-1692309848356\", \"position\": { \"x\": 108, \"y\": 218 }, \"positionAbsolute\": { \"x\": 108, \"y\": 218 } } ], \"viewport\": { \"x\": 7, \"y\": 42, \"zoom\": 1 } } Above, you can see that the .flow file consists of a map with \"nodes\" and a \"viewport.\" The \"nodes\" have the \"id\" (unique identifier of the step), {\"width\", \"height\"} (dimensions of the node), and {\"position\", \"positionAbsolute\"} (relative/absolute position of the node). The node dimensions and position are optional, as they are recomputed on load anyways. The \"viewport\" simply specifies the default zoom and target area.","title":"&lt;flow-name&gt;.pos"},{"location":"flow-management/","text":"Flow Management In this section, we will discuss how to manage and run existing flows on the Silimate Platform via the web interface. CLI flow management is discussed at CLI . Terminology Below are the most important terms to be aware of when using the platform: Flow: A directed acyclic graph (DAG) describing the set of steps that happen and the dependencies between them Flow Run: A particular execution of the flow, where each step is scheduled then executed Active Flow: The currently selected flow Active Flow Run: The currently selected flow run Step: A function or set of functions, typically within one tool, that needs to happen in a flow Task: A particular execution of a step Flow Builder: Page where you can build, run, and monitor flows Home Page: Flow Summary The home page yields a flow summary table, with the flow name, when the last run occurred, the status of all flow runs, and the status of all tasks. For each flow, there is also a set of three actions: Make flow active: change active flow to be set to flow name associated with row Trigger flow: kick off a new flow run Reset flow: delete all information on prior flow runs If there are errors in any flows causing them to be deemed invalid by the scheduler, the errors will be displayed here. NOTE: \"Reset Flow\" button does not delete the flow in question. To delete a flow, see Deleting a Flow . Running a Flow From the web interface, flows can be run in one of two ways: Trigger a flow run on home page Navigate to \"Flow Builder\" in the side bar and click \"Fresh run\" at the top After running a flow, you can view each task and its dependencies/status in the \"Flow Builder\" page. Dependencies are shown as lines between outputs of one step and inputs of another. Steps without dependencies will run in parallel wherever possible. When a flow is not running, little white dots will be visible on the flow builder panel. While running, these dots disappear. Task Logs Tasks typically run in a container. On the \"Flow Builder\" page, logs of a task from its container can be viewed by first clicking to select a task, then clicking the \"View Logs\" bar at the bottom. The blue button on the far right of the \"View Logs\" bar can be used to open the logs in a new window. Task Statuses undefined: flow run has not been initiated null: flow run has been initiated, but task has not been scheduled yet scheduled: task's dependencies have been met and task has been scheduled to run, but task is not queued yet queued: task has been assigned to an execution slot and is awaiting a worker running: task is running success: task completed with non-error return code (caveat: might not have completed successfully!) failed: task completed with return code upstream_failed: one of the task's upstream dependencies did not complete successfully, so task will not run Pausing a Flow Flows can be paused by clicking the \"Pause\" button in the top panel of the flow builder. Pausing a flow will not kill running tasks. It will not queue any new tasks; tasks will remain in the null or scheduled state. Flows can be unpaused by clicking the button again. Aborting a Flow Aborting a flow will pause a flow and additionally mark any running/scheduled tasks as failed . This will effectively kill the flow run. Getting the Results of a Flow Step Each flow step produces output collateral. This output collateral is available on the CAD server at path /silimate/build/<flow_name>/<step_name>/outputs/ . This output collateral can also be downloaded as a .zip file by right-clicking on a step and clicking \"Access Outputs.\" Rerunning Flow Steps To rerun a step, right-click on the step and click Run from the dropdown menu. You will have the option to rerun the up/downstream components in addition. You can also clear a flow step or mark it as failed. You can use \"Mark as Failed\" to \"run up to\" a certain step, by marking the steps after it as failed. Adjusting the View The view controls are in the bottom right corner. You can zoom in (+), zoom out (-), zoom to fit ([]), or lock the flow to prevent edits (lock button).","title":"Flow Management"},{"location":"flow-management/#flow-management","text":"In this section, we will discuss how to manage and run existing flows on the Silimate Platform via the web interface. CLI flow management is discussed at CLI .","title":"Flow Management"},{"location":"flow-management/#terminology","text":"Below are the most important terms to be aware of when using the platform: Flow: A directed acyclic graph (DAG) describing the set of steps that happen and the dependencies between them Flow Run: A particular execution of the flow, where each step is scheduled then executed Active Flow: The currently selected flow Active Flow Run: The currently selected flow run Step: A function or set of functions, typically within one tool, that needs to happen in a flow Task: A particular execution of a step Flow Builder: Page where you can build, run, and monitor flows","title":"Terminology"},{"location":"flow-management/#home-page-flow-summary","text":"The home page yields a flow summary table, with the flow name, when the last run occurred, the status of all flow runs, and the status of all tasks. For each flow, there is also a set of three actions: Make flow active: change active flow to be set to flow name associated with row Trigger flow: kick off a new flow run Reset flow: delete all information on prior flow runs If there are errors in any flows causing them to be deemed invalid by the scheduler, the errors will be displayed here. NOTE: \"Reset Flow\" button does not delete the flow in question. To delete a flow, see Deleting a Flow .","title":"Home Page: Flow Summary"},{"location":"flow-management/#running-a-flow","text":"From the web interface, flows can be run in one of two ways: Trigger a flow run on home page Navigate to \"Flow Builder\" in the side bar and click \"Fresh run\" at the top After running a flow, you can view each task and its dependencies/status in the \"Flow Builder\" page. Dependencies are shown as lines between outputs of one step and inputs of another. Steps without dependencies will run in parallel wherever possible. When a flow is not running, little white dots will be visible on the flow builder panel. While running, these dots disappear.","title":"Running a Flow"},{"location":"flow-management/#task-logs","text":"Tasks typically run in a container. On the \"Flow Builder\" page, logs of a task from its container can be viewed by first clicking to select a task, then clicking the \"View Logs\" bar at the bottom. The blue button on the far right of the \"View Logs\" bar can be used to open the logs in a new window.","title":"Task Logs"},{"location":"flow-management/#task-statuses","text":"undefined: flow run has not been initiated null: flow run has been initiated, but task has not been scheduled yet scheduled: task's dependencies have been met and task has been scheduled to run, but task is not queued yet queued: task has been assigned to an execution slot and is awaiting a worker running: task is running success: task completed with non-error return code (caveat: might not have completed successfully!) failed: task completed with return code upstream_failed: one of the task's upstream dependencies did not complete successfully, so task will not run","title":"Task Statuses"},{"location":"flow-management/#pausing-a-flow","text":"Flows can be paused by clicking the \"Pause\" button in the top panel of the flow builder. Pausing a flow will not kill running tasks. It will not queue any new tasks; tasks will remain in the null or scheduled state. Flows can be unpaused by clicking the button again.","title":"Pausing a Flow"},{"location":"flow-management/#aborting-a-flow","text":"Aborting a flow will pause a flow and additionally mark any running/scheduled tasks as failed . This will effectively kill the flow run.","title":"Aborting a Flow"},{"location":"flow-management/#getting-the-results-of-a-flow-step","text":"Each flow step produces output collateral. This output collateral is available on the CAD server at path /silimate/build/<flow_name>/<step_name>/outputs/ . This output collateral can also be downloaded as a .zip file by right-clicking on a step and clicking \"Access Outputs.\"","title":"Getting the Results of a Flow Step"},{"location":"flow-management/#rerunning-flow-steps","text":"To rerun a step, right-click on the step and click Run from the dropdown menu. You will have the option to rerun the up/downstream components in addition. You can also clear a flow step or mark it as failed. You can use \"Mark as Failed\" to \"run up to\" a certain step, by marking the steps after it as failed.","title":"Rerunning Flow Steps"},{"location":"flow-management/#adjusting-the-view","text":"The view controls are in the bottom right corner. You can zoom in (+), zoom out (-), zoom to fit ([]), or lock the flow to prevent edits (lock button).","title":"Adjusting the View"},{"location":"infrastructure/","text":"Infrastructure","title":"Infrastructure"},{"location":"infrastructure/#infrastructure","text":"","title":"Infrastructure"},{"location":"installation/","text":"Installation","title":"Installation Guide"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installing-updates/","text":"Installing Updates","title":"Installing Updates"},{"location":"installing-updates/#installing-updates","text":"","title":"Installing Updates"},{"location":"metrics/","text":"Metrics","title":"Metrics"},{"location":"metrics/#metrics","text":"","title":"Metrics"},{"location":"step-building/","text":"Step Building","title":"Step Building"},{"location":"step-building/#step-building","text":"","title":"Step Building"}]}