{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Silimate Platform Docs This is the documentation website for the Silimate Platform. For any questions, comments, or concerns, please contact support via Slack/ email . Platform Philosophies Dependencies should be managed properly: ensure dependencies are met before running something Inputs: (1) Tool and version, (2) Tool settings/parameters (3) Design collateral, (4) Script template Outputs: (1) Design collateral, (2) Log(s), (3) Metrics Logs and metrics are automatically warehoused Settings/parameters can be overridden as needed Intuitive interfaces are important: build tools that follow good design principles, so EDA engineers love to use them. Provide intuitive GUI and CLI Don't overcomplicate: most people have simple needs. Show if useful, hide if not Flows should be PDK-agnostic: link PDKs once, auto-reference in each tool Flows should be vendor-agnostic: not tied to any vendor-specific flow Transparency: users should be able to see what is going on under the hood to debug Separation of concerns: tool settings and scripts can be overridden, where USER overrides DESIGN overrides TECH overrides TOOL Quick Setup: Web GUI Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Infrastructure or contact support via Slack/ email . Port forwarding (recommended) To access the GUI on your local machine, you need to provide an SSH tunnel into the CAD server with port forwarding . To do this, add the argument -L 80:192.168.49.2:80 to your ssh command, for example: sudo ssh -Y -i testing_ec2.pem -L 80:192.168.49.2:80 ec2-user@ec2-XX-XX-X-XXX.us-west-2.compute.amazonaws.com NOTE: you may need root privileges on your local machine to forward to port 80, hence sudo in the above command. Now, you should be able to navigate to http://localhost on your local browser and the platform web GUI should appear. X11 forwarding/VNC Assuming you have X11 forwarding/VNC setup between your local machine and the CAD server, you may simply open a remote browser session (e.g., firefox ) and navigate to http://192.168.49.2 . NOTE: this approach will likely be less responsive than port forwarding, hence not recommended. Quick Setup: CLI Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Infrastructure or contact support via Slack/ email . CAD Server Setup Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=192.168.49.2 export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:/silimate/cli Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active) Local Machine Setup Make sure that SSH port forwarding is set up correctly. See Quick Setup: Web GUI Clone the CLI to your local machine path <CLI_DIRECTORY> (wherever you desire): git clone https://github.com/silimate/cli/ <CLI_DIRECTORY> Ensure the first line of <CLI_DIRECTORY>/smake points to your python3 interpreter path, e.g.: #!/usr/local/bin/python3 Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=localhost export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:<CLI_DIRECTORY> Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"Home"},{"location":"#welcome-to-silimate-platform-docs","text":"This is the documentation website for the Silimate Platform. For any questions, comments, or concerns, please contact support via Slack/ email .","title":"Welcome to Silimate Platform Docs"},{"location":"#platform-philosophies","text":"Dependencies should be managed properly: ensure dependencies are met before running something Inputs: (1) Tool and version, (2) Tool settings/parameters (3) Design collateral, (4) Script template Outputs: (1) Design collateral, (2) Log(s), (3) Metrics Logs and metrics are automatically warehoused Settings/parameters can be overridden as needed Intuitive interfaces are important: build tools that follow good design principles, so EDA engineers love to use them. Provide intuitive GUI and CLI Don't overcomplicate: most people have simple needs. Show if useful, hide if not Flows should be PDK-agnostic: link PDKs once, auto-reference in each tool Flows should be vendor-agnostic: not tied to any vendor-specific flow Transparency: users should be able to see what is going on under the hood to debug Separation of concerns: tool settings and scripts can be overridden, where USER overrides DESIGN overrides TECH overrides TOOL","title":"Platform Philosophies"},{"location":"#quick-setup-web-gui","text":"Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Infrastructure or contact support via Slack/ email .","title":"Quick Setup: Web GUI"},{"location":"#port-forwarding-recommended","text":"To access the GUI on your local machine, you need to provide an SSH tunnel into the CAD server with port forwarding . To do this, add the argument -L 80:192.168.49.2:80 to your ssh command, for example: sudo ssh -Y -i testing_ec2.pem -L 80:192.168.49.2:80 ec2-user@ec2-XX-XX-X-XXX.us-west-2.compute.amazonaws.com NOTE: you may need root privileges on your local machine to forward to port 80, hence sudo in the above command. Now, you should be able to navigate to http://localhost on your local browser and the platform web GUI should appear.","title":"Port forwarding (recommended)"},{"location":"#x11-forwardingvnc","text":"Assuming you have X11 forwarding/VNC setup between your local machine and the CAD server, you may simply open a remote browser session (e.g., firefox ) and navigate to http://192.168.49.2 . NOTE: this approach will likely be less responsive than port forwarding, hence not recommended.","title":"X11 forwarding/VNC"},{"location":"#quick-setup-cli","text":"Silimate Platform should be already installed and properly running on your CAD server. If it is not, see Infrastructure or contact support via Slack/ email .","title":"Quick Setup: CLI"},{"location":"#cad-server-setup","text":"Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=192.168.49.2 export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:/silimate/cli Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"CAD Server Setup"},{"location":"#local-machine-setup","text":"Make sure that SSH port forwarding is set up correctly. See Quick Setup: Web GUI Clone the CLI to your local machine path <CLI_DIRECTORY> (wherever you desire): git clone https://github.com/silimate/cli/ <CLI_DIRECTORY> Ensure the first line of <CLI_DIRECTORY>/smake points to your python3 interpreter path, e.g.: #!/usr/local/bin/python3 Ensure requests library for python3 is installed: python3 -m pip install requests Add to your .profile (or equivalent shell init script): export SILIMATE_ENDPOINT=localhost export SILIMATE_PASSWORD=Silimate1234%4321etamiliS export PATH=$PATH:<CLI_DIRECTORY> Restart your shell and test with smake -l . You should see a list of all the available flows, something like: example-verilator-sim (active, paused) example-yosys-syn (active, paused) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"Local Machine Setup"},{"location":"admin-tools/","text":"Administration Tools Silimate provides three administration tools in the web interface to debug issues with its components. These tools are accessible in the top-right corner dropdown menu: Kubernetes dashboard Platform dashboard native Platform flow engine administration For more details on how to operate these administration tools, please contact support via Slack/ email . Kubernetes Dashboard By default, a no-authentication Kubernetes Dashboard is deployed to the Kubernetes cluster for monitoring/debugging. This dashboard can also be accessed at http://localhost/k8s . The password prompt can be skipped: Clicking \"Skip\" should lead to the Kubernetes Dashboard, with all the configuration displayed properly: Platform Dashboard (Native Mode) To dive into the Grafana instance for deeper dashboard access, you can navigate to http://localhost/dash : See the Grafana website for more details. Platform Flow Engine Admin Suite To dive into the flow scheduler/webserver, you can navigate to http://localhost/flow . The username is silimate and the password is Silimate1234%4321etamiliS if required.","title":"Admin Tools"},{"location":"admin-tools/#administration-tools","text":"Silimate provides three administration tools in the web interface to debug issues with its components. These tools are accessible in the top-right corner dropdown menu: Kubernetes dashboard Platform dashboard native Platform flow engine administration For more details on how to operate these administration tools, please contact support via Slack/ email .","title":"Administration Tools"},{"location":"admin-tools/#kubernetes-dashboard","text":"By default, a no-authentication Kubernetes Dashboard is deployed to the Kubernetes cluster for monitoring/debugging. This dashboard can also be accessed at http://localhost/k8s . The password prompt can be skipped: Clicking \"Skip\" should lead to the Kubernetes Dashboard, with all the configuration displayed properly:","title":"Kubernetes Dashboard"},{"location":"admin-tools/#platform-dashboard-native-mode","text":"To dive into the Grafana instance for deeper dashboard access, you can navigate to http://localhost/dash : See the Grafana website for more details.","title":"Platform Dashboard (Native Mode)"},{"location":"admin-tools/#platform-flow-engine-admin-suite","text":"To dive into the flow scheduler/webserver, you can navigate to http://localhost/flow . The username is silimate and the password is Silimate1234%4321etamiliS if required.","title":"Platform Flow Engine Admin Suite"},{"location":"built-in-steps/","text":"Built-In Steps Below, we provide description of Silimate's qualified commercial tool steps. Inputs Input steps provide a way to get flow input files (e.g., designs, testbenches, configuration) into the flow. They work by providing mappings between input paths (in a git repository or on disk) and \"aliases\" (the names to call these files/directories inside the flow). These mappings can be added/removed by double-clicking the input node once dragged into the flow. The number of input handles can be increased/decreased as desired. Handles with the appropriate file/directory names are populated on the node in the flow builder once the dialog box is confirmed. File(s) from Git This step allows you to specify a git URL, branch, clone depth, and commit hash/tag to fetch files from. This step is recommended for situations where you want to integrate a particular version-controlled snapshot of some files/directories. It is also recommended when you want to perform flow runs with the latest changes to the flow inputs. NOTE: File(s) from Git will use the SSH keys specified in /silimate/.ssh/ to fetch/pull the repository. Make sure the necessary keys are included in this directory. File(s) from Disk This step allows you to specify location on the CAD server's disk. This step is recommended for situations where you have a static file on disk that needs to be integrated. If the file is version-controlled on disk, we recommend using File(s) from Git if possible. PDK Setup PDK setup nodes provide scripts to set design variables and paths to use a particular PDK. TSMC22 ARM PDK Setup This PDK setup node provides constraint_modes.ref.tcl , which is a reference for how constraint modes should be set up for a simple design. It also provides the mmmc_config.pdk.tcl which specifies paths to use for loading the PDK in multi-mode multi-corner (MMMC) mode. Logic Synthesis Logic synthesis using Cadence Genus can be run in two ways: step-at-a-time or all-in-one. To use the step-at-a-time approach, use Flow Setup -> Generic Synth -> Tech Mapping -> Synthesis Opt . To use the all-in-one approach, use Flow Setup -> Synthesis Flow . Cadence Genus Flow Setup Generates the flow template and populates the flow scripts, allowing PDK integration and overrides for default flow settings (via config/ input). Outputs are config/ (configuration scripts), flow/ (reference methodology flow scripts), and a log file. Cadence Genus Generic Synth Takes constraints and RTL and performs synthesis to generics (pre-technology mapped cells). Cadence Genus Tech Mapping Takes generic synth DB and performs technology mapping using PDK cells. Cadence Genus Synthesis Opt Takes tech mapped DB and performs logic optimization. Cadence Genus Synthesis Flow Performs the above three steps in one. Logs/Metrics Collecting and reporting logs/metrics is done explicitly, by calling the respective APIs through a flow step. The Log/Metric APIs are described in more detail later. Cadence Metrics This step takes Cadence flow-generated metrics.csv and metrics.json and puts them in the metrics database. Import Logs to Database This step puts each line of a log file into the log database.","title":"Built-In Steps"},{"location":"built-in-steps/#built-in-steps","text":"Below, we provide description of Silimate's qualified commercial tool steps.","title":"Built-In Steps"},{"location":"built-in-steps/#inputs","text":"Input steps provide a way to get flow input files (e.g., designs, testbenches, configuration) into the flow. They work by providing mappings between input paths (in a git repository or on disk) and \"aliases\" (the names to call these files/directories inside the flow). These mappings can be added/removed by double-clicking the input node once dragged into the flow. The number of input handles can be increased/decreased as desired. Handles with the appropriate file/directory names are populated on the node in the flow builder once the dialog box is confirmed.","title":"Inputs"},{"location":"built-in-steps/#files-from-git","text":"This step allows you to specify a git URL, branch, clone depth, and commit hash/tag to fetch files from. This step is recommended for situations where you want to integrate a particular version-controlled snapshot of some files/directories. It is also recommended when you want to perform flow runs with the latest changes to the flow inputs. NOTE: File(s) from Git will use the SSH keys specified in /silimate/.ssh/ to fetch/pull the repository. Make sure the necessary keys are included in this directory.","title":"File(s) from Git"},{"location":"built-in-steps/#files-from-disk","text":"This step allows you to specify location on the CAD server's disk. This step is recommended for situations where you have a static file on disk that needs to be integrated. If the file is version-controlled on disk, we recommend using File(s) from Git if possible.","title":"File(s) from Disk"},{"location":"built-in-steps/#pdk-setup","text":"PDK setup nodes provide scripts to set design variables and paths to use a particular PDK.","title":"PDK Setup"},{"location":"built-in-steps/#tsmc22-arm-pdk-setup","text":"This PDK setup node provides constraint_modes.ref.tcl , which is a reference for how constraint modes should be set up for a simple design. It also provides the mmmc_config.pdk.tcl which specifies paths to use for loading the PDK in multi-mode multi-corner (MMMC) mode.","title":"TSMC22 ARM PDK Setup"},{"location":"built-in-steps/#logic-synthesis","text":"Logic synthesis using Cadence Genus can be run in two ways: step-at-a-time or all-in-one. To use the step-at-a-time approach, use Flow Setup -> Generic Synth -> Tech Mapping -> Synthesis Opt . To use the all-in-one approach, use Flow Setup -> Synthesis Flow .","title":"Logic Synthesis"},{"location":"built-in-steps/#cadence-genus-flow-setup","text":"Generates the flow template and populates the flow scripts, allowing PDK integration and overrides for default flow settings (via config/ input). Outputs are config/ (configuration scripts), flow/ (reference methodology flow scripts), and a log file.","title":"Cadence Genus Flow Setup"},{"location":"built-in-steps/#cadence-genus-generic-synth","text":"Takes constraints and RTL and performs synthesis to generics (pre-technology mapped cells).","title":"Cadence Genus Generic Synth"},{"location":"built-in-steps/#cadence-genus-tech-mapping","text":"Takes generic synth DB and performs technology mapping using PDK cells.","title":"Cadence Genus Tech Mapping"},{"location":"built-in-steps/#cadence-genus-synthesis-opt","text":"Takes tech mapped DB and performs logic optimization.","title":"Cadence Genus Synthesis Opt"},{"location":"built-in-steps/#cadence-genus-synthesis-flow","text":"Performs the above three steps in one.","title":"Cadence Genus Synthesis Flow"},{"location":"built-in-steps/#logsmetrics","text":"Collecting and reporting logs/metrics is done explicitly, by calling the respective APIs through a flow step. The Log/Metric APIs are described in more detail later.","title":"Logs/Metrics"},{"location":"built-in-steps/#cadence-metrics","text":"This step takes Cadence flow-generated metrics.csv and metrics.json and puts them in the metrics database.","title":"Cadence Metrics"},{"location":"built-in-steps/#import-logs-to-database","text":"This step puts each line of a log file into the log database.","title":"Import Logs to Database"},{"location":"cli/","text":"Command-Line Interface (CLI) See Quick Setup: CLI for setup instructions. Description Silimake ( smake ) is the command-line interface (CLI) for Silimate Platform. Usage usage: smake [-h] [-f FLOW] [-fr FLOW_RUN] [-s STEP] (-l | -m | -r | -p | -up | -k) [--filter FILTER] [--from-step FROM_STEP] Arguments short long default help -h --help Show this help message and exit -f --flow `pwd` Name of the flow (default: current directory name) -fr --flow-run `date` Name of the flow run (default: UNIX timestamp for new flow run, latest for prior run) -s --step None Name of the step -ls --list List all available flows/flow runs/flow steps and their status -m --monitor Monitor the selected flow run (stream logs to stdout) -r --run Run the selected flow -p --pause Pause the selected flow run -up --unpause Unpause the selected flow run -k --kill Kill the selected flow run --filter None Find all available flows/flow runs/flow steps matching the given regular expression --from-step None Start from a specific step Examples List List all flows smake -l example-verilator-sim (active, paused) example-yosys-syn (active) gcd-genus-syn (active) gcd-genus-syn-step (active) List all flows, regex filter for example smake -l --filter \"example-.*\" example-verilator-sim (active, paused) example-yosys-syn (active) List all flow runs smake -l -f gcd-genus-syn manual__2023-11-16T17:38:18.006881+00:00 (success) manual__2023-12-14T06:21:11.789260+00:00 (failed) manual__2023-12-14T06:45:11.277715+00:00 (failed) manual__2023-12-14T06:52:21.282334+00:00 (success) List all steps in flow run smake -l -f gcd-genus-syn -fr manual__2023-12-14T06:52:21.282334+00:00 cadence-genus-flow-setup-1699496733809 (success) input-files-from-git-1699343281243 (success) cadence-genus-syn-flow-1699514818818 (success) log-importer-1699497799903 (success) cadence-genus-syn-metrics-1699501445634 (success) cadence-csv-metrics-1699513376028 (success) pdk-tsmc22-arm-setup-1699009592822 (success) log-importer-1699496819963 (success) log-importer-1699507594266 (success) Monitor Monitor a running flow run's logs smake -m -f example-yosys-syn -fr manual__2023-12-15T103626.3558800000-d74541b94 ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ... Run Trigger new flow run (unnamed) smake -r -f example-yosys-syn ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ... Trigger new flow run (named) smake -r -f example-yosys-syn -f NAMED_RUN ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'NAMED_RUN', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'NAMED_RUN', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ... Pause/Unpause/Abort Pause a flow run smake -p -f example-yosys-syn Flow example-yosys-syn paused Unpause a flow run smake -up -f example-yosys-syn Flow example-yosys-syn unpaused Abort/kill a (named) flow run smake -k -f example-yosys-syn -fr NAMED_RUN Failing step openroad-yosys-synthesis-1692309880919 ... Flow example-yosys-syn paused","title":"CLI"},{"location":"cli/#command-line-interface-cli","text":"See Quick Setup: CLI for setup instructions.","title":"Command-Line Interface (CLI)"},{"location":"cli/#description","text":"Silimake ( smake ) is the command-line interface (CLI) for Silimate Platform.","title":"Description"},{"location":"cli/#usage","text":"usage: smake [-h] [-f FLOW] [-fr FLOW_RUN] [-s STEP] (-l | -m | -r | -p | -up | -k) [--filter FILTER] [--from-step FROM_STEP]","title":"Usage"},{"location":"cli/#arguments","text":"short long default help -h --help Show this help message and exit -f --flow `pwd` Name of the flow (default: current directory name) -fr --flow-run `date` Name of the flow run (default: UNIX timestamp for new flow run, latest for prior run) -s --step None Name of the step -ls --list List all available flows/flow runs/flow steps and their status -m --monitor Monitor the selected flow run (stream logs to stdout) -r --run Run the selected flow -p --pause Pause the selected flow run -up --unpause Unpause the selected flow run -k --kill Kill the selected flow run --filter None Find all available flows/flow runs/flow steps matching the given regular expression --from-step None Start from a specific step","title":"Arguments"},{"location":"cli/#examples","text":"","title":"Examples"},{"location":"cli/#list","text":"","title":"List"},{"location":"cli/#list-all-flows","text":"smake -l example-verilator-sim (active, paused) example-yosys-syn (active) gcd-genus-syn (active) gcd-genus-syn-step (active)","title":"List all flows"},{"location":"cli/#list-all-flows-regex-filter-for-example","text":"smake -l --filter \"example-.*\" example-verilator-sim (active, paused) example-yosys-syn (active)","title":"List all flows, regex filter for example"},{"location":"cli/#list-all-flow-runs","text":"smake -l -f gcd-genus-syn manual__2023-11-16T17:38:18.006881+00:00 (success) manual__2023-12-14T06:21:11.789260+00:00 (failed) manual__2023-12-14T06:45:11.277715+00:00 (failed) manual__2023-12-14T06:52:21.282334+00:00 (success)","title":"List all flow runs"},{"location":"cli/#list-all-steps-in-flow-run","text":"smake -l -f gcd-genus-syn -fr manual__2023-12-14T06:52:21.282334+00:00 cadence-genus-flow-setup-1699496733809 (success) input-files-from-git-1699343281243 (success) cadence-genus-syn-flow-1699514818818 (success) log-importer-1699497799903 (success) cadence-genus-syn-metrics-1699501445634 (success) cadence-csv-metrics-1699513376028 (success) pdk-tsmc22-arm-setup-1699009592822 (success) log-importer-1699496819963 (success) log-importer-1699507594266 (success)","title":"List all steps in flow run"},{"location":"cli/#monitor","text":"","title":"Monitor"},{"location":"cli/#monitor-a-running-flow-runs-logs","text":"smake -m -f example-yosys-syn -fr manual__2023-12-15T103626.3558800000-d74541b94 ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ...","title":"Monitor a running flow run's logs"},{"location":"cli/#run","text":"","title":"Run"},{"location":"cli/#trigger-new-flow-run-unnamed","text":"smake -r -f example-yosys-syn ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'manual__2023-12-15T103626.3558800000-d74541b94', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ...","title":"Trigger new flow run (unnamed)"},{"location":"cli/#trigger-new-flow-run-named","text":"smake -r -f example-yosys-syn -f NAMED_RUN ... ... [scheduler] [2023-12-15T10:36:39.767+0000] {pod.py:974} INFO - Building pod openroad-yosys-synthesis-1692309880919-186py6gr with labels: {'dag_id': 'example-yosys-syn', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'run_id': 'NAMED_RUN', 'kubernetes_pod_operator': 'True', 'try_number': '1'} [scheduler] [2023-12-15T10:36:39.994+0000] {base.py:73} INFO - Using connection ID 'kubernetes_default' for task execution. [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:549} INFO - Found matching pod openroad-yosys-synthesis-1692309880919-186py6gr with labels {'airflow_kpo_in_cluster': 'True', 'airflow_version': '2.7.3', 'dag_id': 'example-yosys-syn', 'kubernetes_pod_operator': 'True', 'run_id': 'NAMED_RUN', 'task_id': 'openroad-yosys-synthesis-1692309880919', 'try_number': '1'} [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:550} INFO - `try_number` of task_instance: 1 [scheduler] [2023-12-15T10:36:40.585+0000] {pod.py:551} INFO - `try_number` of pod: 1 [scheduler] [2023-12-15T10:36:40.590+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [scheduler] [2023-12-15T10:36:41.596+0000] {pod_manager.py:359} WARNING - Pod not yet started: openroad-yosys-synthesis-1692309880919-186py6gr [openroad-yosys-synthesis-1692309880919] /OpenROAD-flow-scripts/flow/util/markDontUse.py -p \"TAPCELL_X1 FILLCELL_X1 AOI211_X1 OAI211_X1\" -i /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib -o objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Opening file for replace: /OpenROAD-flow-scripts/flow/platforms/nangate45/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] Marked 4 cells as dont_use [openroad-yosys-synthesis-1692309880919] Commented 0 lines containing \"original_pin\" [openroad-yosys-synthesis-1692309880919] Replaced malformed functions 0 [openroad-yosys-synthesis-1692309880919] Writing replaced file: objects/nangate45/gcd/base/lib/NangateOpenCellLibrary_typical.lib [openroad-yosys-synthesis-1692309880919] mkdir -p /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs [openroad-yosys-synthesis-1692309880919] (/usr/bin/time -f 'Elapsed time: %E[h:]min:sec. CPU time: user %U sys %S (%P). Peak memory: %MKB.' yosys -v 3 -c /OpenROAD-flow-scripts/flow/scripts/synth.tcl) 2>&1 | tee /***/build/example-yosys-syn/openroad-yosys-synthesis-1692309880919/outputs/1_1_yosys.log [openroad-yosys-synthesis-1692309880919] 1. Executing Verilog-2005 frontend: ./designs/src/gcd/gcd.v [openroad-yosys-synthesis-1692309880919] 2. Executing Liberty frontend. [openroad-yosys-synthesis-1692309880919] 3. Executing Verilog-2005 frontend: /OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v [openroad-yosys-synthesis-1692309880919] 4. Executing SYNTH pass. ... ...","title":"Trigger new flow run (named)"},{"location":"cli/#pauseunpauseabort","text":"","title":"Pause/Unpause/Abort"},{"location":"cli/#pause-a-flow-run","text":"smake -p -f example-yosys-syn Flow example-yosys-syn paused","title":"Pause a flow run"},{"location":"cli/#unpause-a-flow-run","text":"smake -up -f example-yosys-syn Flow example-yosys-syn unpaused","title":"Unpause a flow run"},{"location":"cli/#abortkill-a-named-flow-run","text":"smake -k -f example-yosys-syn -fr NAMED_RUN Failing step openroad-yosys-synthesis-1692309880919 ... Flow example-yosys-syn paused","title":"Abort/kill a (named) flow run"},{"location":"dashboards/","text":"Dashboards Silimate Platform's dashboarding system is based on Grafana with Plotly plugins. It also has support for Cadence Stylus metrics when a Cadence-based flow with Common UI is enabled. For more information on how to build dashboards with these, check out the links below or contact support. Grafana Plotly Natel Plotly Panel Plugin for Grafana AE3E Plotly Panel Plugin for Grafana Cadence Stylus UI Architecture The basic idea is that logs/metrics go into a PostgreSQL warehouse, which Grafana queries and can make dashboards/plots from. The log/metric collection happens in explicit steps that call the Log/Metrics API . Creating a Dashboard To create a dashboard, click the \"+ Create New\" button in the top navigation bar and click \"Dashboard\" from the dropdown menu. The new dashboard page: Default Dashboard Descriptions Error/Warning Tracker Track errors and warnings and group them by type. Run Metrics Snapshot Show power, performance, area (PPA) metrics collected for a given flow run. Run Metrics Trend Show power, performance, area (PPA) metrics collected across multiple flow runs. Stylus Dashboard Show power, performance, area (PPA) metrics in Cadence's integrated metric viewer.","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"Silimate Platform's dashboarding system is based on Grafana with Plotly plugins. It also has support for Cadence Stylus metrics when a Cadence-based flow with Common UI is enabled. For more information on how to build dashboards with these, check out the links below or contact support. Grafana Plotly Natel Plotly Panel Plugin for Grafana AE3E Plotly Panel Plugin for Grafana Cadence Stylus UI","title":"Dashboards"},{"location":"dashboards/#architecture","text":"The basic idea is that logs/metrics go into a PostgreSQL warehouse, which Grafana queries and can make dashboards/plots from. The log/metric collection happens in explicit steps that call the Log/Metrics API .","title":"Architecture"},{"location":"dashboards/#creating-a-dashboard","text":"To create a dashboard, click the \"+ Create New\" button in the top navigation bar and click \"Dashboard\" from the dropdown menu. The new dashboard page:","title":"Creating a Dashboard"},{"location":"dashboards/#default-dashboard-descriptions","text":"","title":"Default Dashboard Descriptions"},{"location":"dashboards/#errorwarning-tracker","text":"Track errors and warnings and group them by type.","title":"Error/Warning Tracker"},{"location":"dashboards/#run-metrics-snapshot","text":"Show power, performance, area (PPA) metrics collected for a given flow run.","title":"Run Metrics Snapshot"},{"location":"dashboards/#run-metrics-trend","text":"Show power, performance, area (PPA) metrics collected across multiple flow runs.","title":"Run Metrics Trend"},{"location":"dashboards/#stylus-dashboard","text":"Show power, performance, area (PPA) metrics in Cadence's integrated metric viewer.","title":"Stylus Dashboard"},{"location":"flow-building/","text":"Flow Building Here, we will discuss building a flow from discrete steps and connecting dependencies to get everything working. Philosophy Flows are composed of a series of steps that can be parametrized. Steps have file/directory inputs, and perform computation on these to yield file/directory outputs that can be routed to other step inputs to form a directed acyclic graph (DAG). Silimate aims to provide a toolbox with the most common EDA tool functionalities encapsulated cleanly. It aims for \"separation of concerns,\" splitting design-specific, PDK-specific, and tool-specific settings into different modules to allow for maximal flow reuse. With this toolbox, simple flows can be quickly constructed and executed, while capturing metrics and design collateral cleanly. Flow Building (Web) We will start with a guide on flow building from the web interface. A description of the generated flow JSON files is in Advanced: Flow Building (Flow Files) . These JSON-based flow files can be developed programmatically as needed for dynamic flow behavior. Create New Flow To create a new flow, click on \"+ Create New\" in the navigation bar. Select \"Flow\" from the dropdown menu. See screenshot above. Saving a Flow Use the \"Save flow\" button in the top panel to save. Step Library The step library is located as a panel on the left-hand side of the flow builder. See screenshot above. Steps are grouped by function based on which EDA stage they are related to. You can click to see which steps are in each category, then drag and drop desired steps onto the flow to create step nodes. Descriptions of the built-in steps are in Built-In Step Descriptions . Connecting Step Dependencies Drag an edge between an output of one step X and an input of another step Y to define a file/directory dependency from step X to Y. File types between edges must be the same for the edge to be allowed. If the file names between steps are exactly the same, you can also right-click on a cell which has missing edges and click on \"Autoconnect Inputs\" shortcut to save time. This will try to automatically infer and add edges based on common names between steps. Parametrized Steps Right-click and click on \"Step Settings\" to edit parameters of the step. Double clicking a step will also open the dialog box. Advanced: Flow Building (Flow Files) The best way to understand the flow file structure is to look at one. Flows are located in /silimate/flows/ directory (best practice is to version control this!) and consist of <flow-name>.flow and <flow-name>.pos . <flow-name>.flow { \"nodes\": [ { \"id\": \"log-importer-1692309904268\", \"type\": \"log-importer\" }, { \"id\": \"openroad-metrics-1692309893709\", \"type\": \"openroad-metrics\" }, { \"id\": \"openroad-yosys-synthesis-1692309880919\", \"type\": \"openroad-yosys-synthesis\" }, { \"data\": { \"git_branch\": \"main\", \"git_clone_depth\": \"1\", \"git_commit\": \"HEAD\", \"git_url\": \"https://github.com/silimate/designs\", \"inputMappings\": { \"constraint.sdc\": \"gcd/constraint.sdc\", \"design.v\": \"gcd/gcd.v\" } }, \"id\": \"input-files-from-git-1692309848356\", \"type\": \"input-files-from-git-1692309848356\" } ], \"edges\": [ { \"id\": \"autoconnect__openroad-metrics-1692309893709-synth_stat.rpt-openroad-yosys-synthesis-1692309880919-synth_stat.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"synth_stat.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"synth_stat.rpt\" }, { \"id\": \"autoconnect__openroad-metrics-1692309893709-design.rpt-openroad-yosys-synthesis-1692309880919-design.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"design.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"design.rpt\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-constraint.sdc-input-files-from-git-1692309848356-constraint.sdc\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"constraint.sdc\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"constraint.sdc\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-src/-input-files-from-git-1692309848356-design.v\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"design.v\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"src/\" }, { \"id\": \"reactflow__edge-openroad-yosys-synthesis-16923098809191_1_yosys.log-log-importer-1692309904268<inherit>.log\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"1_1_yosys.log\", \"target\": \"log-importer-1692309904268\", \"targetHandle\": \"<inherit>.log\" } ] } Above, you can see that the .flow file consists of a map with \"nodes\" and \"edges.\" Nodes are steps and edges correspond to links between files/directories across two steps. A node has an \"id\" (a unique identifier for the step), a \"type\" (the step type), and \"data\" (the set of parameters associated with the step). Input steps also define a list of mappings between paths and file/directory names, more details can be found in Input Steps . An edge has an \"id\" (a unique identifier for the dependency), a \"source\" (step providing the dependency), a \"sourceHandle\" (output file/directory being provided), a \"target\" (step receiving the dependency), and a \"targetHandle\" (output ) <flow-name>.pos { \"nodes\": [ { \"width\": 150, \"height\": 64, \"id\": \"log-importer-1692309904268\", \"position\": { \"x\": 585, \"y\": 218 }, \"positionAbsolute\": { \"x\": 585, \"y\": 218 } }, { \"width\": 150, \"height\": 80, \"id\": \"openroad-metrics-1692309893709\", \"position\": { \"x\": 586, \"y\": 326 }, \"positionAbsolute\": { \"x\": 586, \"y\": 326 } }, { \"width\": 150, \"height\": 176, \"id\": \"openroad-yosys-synthesis-1692309880919\", \"position\": { \"x\": 350, \"y\": 200 }, \"positionAbsolute\": { \"x\": 350, \"y\": 200 } }, { \"width\": 150, \"height\": 80, \"id\": \"input-files-from-git-1692309848356\", \"position\": { \"x\": 108, \"y\": 218 }, \"positionAbsolute\": { \"x\": 108, \"y\": 218 } } ], \"viewport\": { \"x\": 7, \"y\": 42, \"zoom\": 1 } } Above, you can see that the .flow file consists of a map with \"nodes\" and a \"viewport.\" The \"nodes\" have the \"id\" (unique identifier of the step), {\"width\", \"height\"} (dimensions of the node), and {\"position\", \"positionAbsolute\"} (relative/absolute position of the node). The node dimensions and position are optional, as they are recomputed on load anyways. The \"viewport\" simply specifies the default zoom and target area.","title":"Flow Building"},{"location":"flow-building/#flow-building","text":"Here, we will discuss building a flow from discrete steps and connecting dependencies to get everything working.","title":"Flow Building"},{"location":"flow-building/#philosophy","text":"Flows are composed of a series of steps that can be parametrized. Steps have file/directory inputs, and perform computation on these to yield file/directory outputs that can be routed to other step inputs to form a directed acyclic graph (DAG). Silimate aims to provide a toolbox with the most common EDA tool functionalities encapsulated cleanly. It aims for \"separation of concerns,\" splitting design-specific, PDK-specific, and tool-specific settings into different modules to allow for maximal flow reuse. With this toolbox, simple flows can be quickly constructed and executed, while capturing metrics and design collateral cleanly.","title":"Philosophy"},{"location":"flow-building/#flow-building-web","text":"We will start with a guide on flow building from the web interface. A description of the generated flow JSON files is in Advanced: Flow Building (Flow Files) . These JSON-based flow files can be developed programmatically as needed for dynamic flow behavior.","title":"Flow Building (Web)"},{"location":"flow-building/#create-new-flow","text":"To create a new flow, click on \"+ Create New\" in the navigation bar. Select \"Flow\" from the dropdown menu. See screenshot above.","title":"Create New Flow"},{"location":"flow-building/#saving-a-flow","text":"Use the \"Save flow\" button in the top panel to save.","title":"Saving a Flow"},{"location":"flow-building/#step-library","text":"The step library is located as a panel on the left-hand side of the flow builder. See screenshot above. Steps are grouped by function based on which EDA stage they are related to. You can click to see which steps are in each category, then drag and drop desired steps onto the flow to create step nodes. Descriptions of the built-in steps are in Built-In Step Descriptions .","title":"Step Library"},{"location":"flow-building/#connecting-step-dependencies","text":"Drag an edge between an output of one step X and an input of another step Y to define a file/directory dependency from step X to Y. File types between edges must be the same for the edge to be allowed. If the file names between steps are exactly the same, you can also right-click on a cell which has missing edges and click on \"Autoconnect Inputs\" shortcut to save time. This will try to automatically infer and add edges based on common names between steps.","title":"Connecting Step Dependencies"},{"location":"flow-building/#parametrized-steps","text":"Right-click and click on \"Step Settings\" to edit parameters of the step. Double clicking a step will also open the dialog box.","title":"Parametrized Steps"},{"location":"flow-building/#advanced-flow-building-flow-files","text":"The best way to understand the flow file structure is to look at one. Flows are located in /silimate/flows/ directory (best practice is to version control this!) and consist of <flow-name>.flow and <flow-name>.pos .","title":"Advanced: Flow Building (Flow Files)"},{"location":"flow-building/#flow-nameflow","text":"{ \"nodes\": [ { \"id\": \"log-importer-1692309904268\", \"type\": \"log-importer\" }, { \"id\": \"openroad-metrics-1692309893709\", \"type\": \"openroad-metrics\" }, { \"id\": \"openroad-yosys-synthesis-1692309880919\", \"type\": \"openroad-yosys-synthesis\" }, { \"data\": { \"git_branch\": \"main\", \"git_clone_depth\": \"1\", \"git_commit\": \"HEAD\", \"git_url\": \"https://github.com/silimate/designs\", \"inputMappings\": { \"constraint.sdc\": \"gcd/constraint.sdc\", \"design.v\": \"gcd/gcd.v\" } }, \"id\": \"input-files-from-git-1692309848356\", \"type\": \"input-files-from-git-1692309848356\" } ], \"edges\": [ { \"id\": \"autoconnect__openroad-metrics-1692309893709-synth_stat.rpt-openroad-yosys-synthesis-1692309880919-synth_stat.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"synth_stat.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"synth_stat.rpt\" }, { \"id\": \"autoconnect__openroad-metrics-1692309893709-design.rpt-openroad-yosys-synthesis-1692309880919-design.rpt\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"design.rpt\", \"target\": \"openroad-metrics-1692309893709\", \"targetHandle\": \"design.rpt\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-constraint.sdc-input-files-from-git-1692309848356-constraint.sdc\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"constraint.sdc\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"constraint.sdc\" }, { \"id\": \"autoconnect__openroad-yosys-synthesis-1692309880919-src/-input-files-from-git-1692309848356-design.v\", \"source\": \"input-files-from-git-1692309848356\", \"sourceHandle\": \"design.v\", \"target\": \"openroad-yosys-synthesis-1692309880919\", \"targetHandle\": \"src/\" }, { \"id\": \"reactflow__edge-openroad-yosys-synthesis-16923098809191_1_yosys.log-log-importer-1692309904268<inherit>.log\", \"source\": \"openroad-yosys-synthesis-1692309880919\", \"sourceHandle\": \"1_1_yosys.log\", \"target\": \"log-importer-1692309904268\", \"targetHandle\": \"<inherit>.log\" } ] } Above, you can see that the .flow file consists of a map with \"nodes\" and \"edges.\" Nodes are steps and edges correspond to links between files/directories across two steps. A node has an \"id\" (a unique identifier for the step), a \"type\" (the step type), and \"data\" (the set of parameters associated with the step). Input steps also define a list of mappings between paths and file/directory names, more details can be found in Input Steps . An edge has an \"id\" (a unique identifier for the dependency), a \"source\" (step providing the dependency), a \"sourceHandle\" (output file/directory being provided), a \"target\" (step receiving the dependency), and a \"targetHandle\" (output )","title":"&lt;flow-name&gt;.flow"},{"location":"flow-building/#flow-namepos","text":"{ \"nodes\": [ { \"width\": 150, \"height\": 64, \"id\": \"log-importer-1692309904268\", \"position\": { \"x\": 585, \"y\": 218 }, \"positionAbsolute\": { \"x\": 585, \"y\": 218 } }, { \"width\": 150, \"height\": 80, \"id\": \"openroad-metrics-1692309893709\", \"position\": { \"x\": 586, \"y\": 326 }, \"positionAbsolute\": { \"x\": 586, \"y\": 326 } }, { \"width\": 150, \"height\": 176, \"id\": \"openroad-yosys-synthesis-1692309880919\", \"position\": { \"x\": 350, \"y\": 200 }, \"positionAbsolute\": { \"x\": 350, \"y\": 200 } }, { \"width\": 150, \"height\": 80, \"id\": \"input-files-from-git-1692309848356\", \"position\": { \"x\": 108, \"y\": 218 }, \"positionAbsolute\": { \"x\": 108, \"y\": 218 } } ], \"viewport\": { \"x\": 7, \"y\": 42, \"zoom\": 1 } } Above, you can see that the .flow file consists of a map with \"nodes\" and a \"viewport.\" The \"nodes\" have the \"id\" (unique identifier of the step), {\"width\", \"height\"} (dimensions of the node), and {\"position\", \"positionAbsolute\"} (relative/absolute position of the node). The node dimensions and position are optional, as they are recomputed on load anyways. The \"viewport\" simply specifies the default zoom and target area.","title":"&lt;flow-name&gt;.pos"},{"location":"flow-management/","text":"Flow Management In this section, we will discuss how to manage and run existing flows on the Silimate Platform via the web interface. CLI flow management is discussed at CLI . Terminology Below are the most important terms to be aware of when using the platform: Flow: A directed acyclic graph (DAG) describing the set of steps that happen and the dependencies between them Flow Run: A particular execution of the flow, where each step is scheduled then executed Active Flow: The currently selected flow Active Flow Run: The currently selected flow run Step: A function or set of functions, typically within one tool, that needs to happen in a flow Task: A particular execution of a step Flow Builder: Page where you can build, run, and monitor flows Home Page: Flow Summary The home page yields a flow summary table, with the flow name, when the last run occurred, the status of all flow runs, and the status of all tasks. For each flow, there is also a set of three actions: Make flow active: change active flow to be set to flow name associated with row Trigger flow: kick off a new flow run Reset flow: delete all information on prior flow runs If there are errors in any flows causing them to be deemed invalid by the scheduler, the errors will be displayed here. NOTE: \"Reset Flow\" button does not delete the flow in question. To delete a flow, see Deleting a Flow . Running a Flow From the web interface, flows can be run in one of two ways: Trigger a flow run on home page Navigate to \"Flow Builder\" in the side bar and click \"Fresh run\" at the top After running a flow, you can view each task and its dependencies/status in the \"Flow Builder\" page. Dependencies are shown as lines between outputs of one step and inputs of another. Steps without dependencies will run in parallel wherever possible. When a flow is not running, little white dots will be visible on the flow builder panel. While running, these dots disappear. Task Logs Tasks typically run in a container. On the \"Flow Builder\" page, logs of a task from its container can be viewed by first clicking to select a task, then clicking the \"View Logs\" bar at the bottom. The blue button on the far right of the \"View Logs\" bar can be used to open the logs in a new window. Task Statuses undefined: flow run has not been initiated null: flow run has been initiated, but task has not been scheduled yet scheduled: task's dependencies have been met and task has been scheduled to run, but task is not queued yet queued: task has been assigned to an execution slot and is awaiting a worker running: task is running success: task completed with non-error return code (caveat: might not have completed successfully!) failed: task completed with return code upstream_failed: one of the task's upstream dependencies did not complete successfully, so task will not run Pausing a Flow Flows can be paused by clicking the \"Pause\" button in the top panel of the flow builder. Pausing a flow will not kill running tasks. It will not queue any new tasks; tasks will remain in the null or scheduled state. Flows can be unpaused by clicking the button again. Aborting a Flow Aborting a flow will pause a flow and additionally mark any running/scheduled tasks as failed . This will effectively kill the flow run. Getting the Results of a Flow Step Each flow step produces output collateral. This output collateral is available on the CAD server at path /silimate/build/<flow_name>/<step_name>/outputs/ . This output collateral can also be downloaded as a .zip file by right-clicking on a step and clicking \"Access Outputs.\" Rerunning Flow Steps To rerun a step, right-click on the step and click Run from the dropdown menu. You will have the option to rerun the up/downstream components in addition. You can also clear a flow step or mark it as failed. You can use \"Mark as Failed\" to \"run up to\" a certain step, by marking the steps after it as failed. Adjusting the View The view controls are in the bottom right corner. You can zoom in (+), zoom out (-), zoom to fit ([]), or lock the flow to prevent edits (lock button).","title":"Flow Management"},{"location":"flow-management/#flow-management","text":"In this section, we will discuss how to manage and run existing flows on the Silimate Platform via the web interface. CLI flow management is discussed at CLI .","title":"Flow Management"},{"location":"flow-management/#terminology","text":"Below are the most important terms to be aware of when using the platform: Flow: A directed acyclic graph (DAG) describing the set of steps that happen and the dependencies between them Flow Run: A particular execution of the flow, where each step is scheduled then executed Active Flow: The currently selected flow Active Flow Run: The currently selected flow run Step: A function or set of functions, typically within one tool, that needs to happen in a flow Task: A particular execution of a step Flow Builder: Page where you can build, run, and monitor flows","title":"Terminology"},{"location":"flow-management/#home-page-flow-summary","text":"The home page yields a flow summary table, with the flow name, when the last run occurred, the status of all flow runs, and the status of all tasks. For each flow, there is also a set of three actions: Make flow active: change active flow to be set to flow name associated with row Trigger flow: kick off a new flow run Reset flow: delete all information on prior flow runs If there are errors in any flows causing them to be deemed invalid by the scheduler, the errors will be displayed here. NOTE: \"Reset Flow\" button does not delete the flow in question. To delete a flow, see Deleting a Flow .","title":"Home Page: Flow Summary"},{"location":"flow-management/#running-a-flow","text":"From the web interface, flows can be run in one of two ways: Trigger a flow run on home page Navigate to \"Flow Builder\" in the side bar and click \"Fresh run\" at the top After running a flow, you can view each task and its dependencies/status in the \"Flow Builder\" page. Dependencies are shown as lines between outputs of one step and inputs of another. Steps without dependencies will run in parallel wherever possible. When a flow is not running, little white dots will be visible on the flow builder panel. While running, these dots disappear.","title":"Running a Flow"},{"location":"flow-management/#task-logs","text":"Tasks typically run in a container. On the \"Flow Builder\" page, logs of a task from its container can be viewed by first clicking to select a task, then clicking the \"View Logs\" bar at the bottom. The blue button on the far right of the \"View Logs\" bar can be used to open the logs in a new window.","title":"Task Logs"},{"location":"flow-management/#task-statuses","text":"undefined: flow run has not been initiated null: flow run has been initiated, but task has not been scheduled yet scheduled: task's dependencies have been met and task has been scheduled to run, but task is not queued yet queued: task has been assigned to an execution slot and is awaiting a worker running: task is running success: task completed with non-error return code (caveat: might not have completed successfully!) failed: task completed with return code upstream_failed: one of the task's upstream dependencies did not complete successfully, so task will not run","title":"Task Statuses"},{"location":"flow-management/#pausing-a-flow","text":"Flows can be paused by clicking the \"Pause\" button in the top panel of the flow builder. Pausing a flow will not kill running tasks. It will not queue any new tasks; tasks will remain in the null or scheduled state. Flows can be unpaused by clicking the button again.","title":"Pausing a Flow"},{"location":"flow-management/#aborting-a-flow","text":"Aborting a flow will pause a flow and additionally mark any running/scheduled tasks as failed . This will effectively kill the flow run.","title":"Aborting a Flow"},{"location":"flow-management/#getting-the-results-of-a-flow-step","text":"Each flow step produces output collateral. This output collateral is available on the CAD server at path /silimate/build/<flow_name>/<step_name>/outputs/ . This output collateral can also be downloaded as a .zip file by right-clicking on a step and clicking \"Access Outputs.\"","title":"Getting the Results of a Flow Step"},{"location":"flow-management/#rerunning-flow-steps","text":"To rerun a step, right-click on the step and click Run from the dropdown menu. You will have the option to rerun the up/downstream components in addition. You can also clear a flow step or mark it as failed. You can use \"Mark as Failed\" to \"run up to\" a certain step, by marking the steps after it as failed.","title":"Rerunning Flow Steps"},{"location":"flow-management/#adjusting-the-view","text":"The view controls are in the bottom right corner. You can zoom in (+), zoom out (-), zoom to fit ([]), or lock the flow to prevent edits (lock button).","title":"Adjusting the View"},{"location":"infrastructure/","text":"Infrastructure Silimate Platform is built on Kubernetes (K8s) and Docker Engine. It runs several microservices and by default syncs from the stable upstream Docker image repository. Brief Intro to Kubernetes (K8s) and Docker Engine Docker is a tool to provide isolation between resources in running applications via containerization . It runs one level higher than virtualization (thus having less overhead than KVM and other virtual machine approaches), since applications still share the OS kernel of the host. Kubernetes is a tool to manage/deploy Docker containers that need to access each other and various resources, e.g., storage, disk, etc. It can run on a single server with minikube , which is a simple K8s implementation, or kubeadm for multi-node implementation. Pros/Cons of K8s and Docker Pros: - K8s makes it very easy to describe how infrastructure should be set up with K8s YAML files - Docker provides isolation between tool libraries, environment variables, loaded modules, etc. - K8s can prevent accidental write access to certain resources, e.g., host files outside of a given directory - K8s can detect when services are down and try to recover them - K8s can monitor service status and send email/Slack notifications when any microservice has a problem - Otherwise, one service can die silently, making problems difficult to debug - Very easy to receive updates, simply reload Docker containers Cons: - Small (5-10%) overhead associated with containers - Learning curve for developing infrastructure with K8s can be difficult For the last \"con\", it should be noted that this difficulty applies mainly to application development. Once deployed, it tends to be fairly straightforward to manage services. Accessing K8s K8s can be accessed and administrated via a GUI by (1) navigating to the K8s platform and selecting Kubernetes in the top-right corner, or (2) connecting via an external K8s management tool on port 8443 (this port should be forwarded when SSHing into the host server). Once the dashboard is loaded, you can click Skip and load the dashboard, which should look like below: Architecture Description Below is a representation of the microservices and how they interplay with one another. Inside of Kubernetes, there are several resources that describe the infrastructure. There is a single deployment called silimate-platform-k8s-deployment which instantiates a single pod containing five containers: - silimate-platform-frontend which contains NGINX reverse proxy and the frontend service (on port ) - silimate-platform-backend which contains the backend API server - silimate-dashboard which contains the Grafana dashboard with the necessary plugins - silimate-flow which is instantiated twice, with one instance corresponding to the flow scheduler and the other to an API server which powers the CLI and the front-end Besides the deployment, the Docker containers need access to various filesystem resources. This is done with 4 persistent volumes (and associated volume claims), mounted via NFS: - logs-volume which saves backups of the logs in /var/logs inside each container - pdk-volume which mounts the AWS ECR repo containing PDK information at /pdk inside each container - host-volume which mounts the host / at /host to give read-only access to the filesystem inside each container - silimate-volume which mounts the /silimate directory at /silimate inside each container There are a few other noteworthy Kubernetes resources that are instantiated for final setup: - A service called silimate-platform-service , which exposes the frontend - A config map called silimate-config , which sets up customer-specific settings - An ECR secret for retrieving Docker containers from the upstream repository called aws-ecr-secret K8s Make commands WIP Installation Guide Installation simply involves installing Docker and minikube / kubeadm and running the above make commands.","title":"Infrastructure"},{"location":"infrastructure/#infrastructure","text":"Silimate Platform is built on Kubernetes (K8s) and Docker Engine. It runs several microservices and by default syncs from the stable upstream Docker image repository.","title":"Infrastructure"},{"location":"infrastructure/#brief-intro-to-kubernetes-k8s-and-docker-engine","text":"Docker is a tool to provide isolation between resources in running applications via containerization . It runs one level higher than virtualization (thus having less overhead than KVM and other virtual machine approaches), since applications still share the OS kernel of the host. Kubernetes is a tool to manage/deploy Docker containers that need to access each other and various resources, e.g., storage, disk, etc. It can run on a single server with minikube , which is a simple K8s implementation, or kubeadm for multi-node implementation.","title":"Brief Intro to Kubernetes (K8s) and Docker Engine"},{"location":"infrastructure/#proscons-of-k8s-and-docker","text":"Pros: - K8s makes it very easy to describe how infrastructure should be set up with K8s YAML files - Docker provides isolation between tool libraries, environment variables, loaded modules, etc. - K8s can prevent accidental write access to certain resources, e.g., host files outside of a given directory - K8s can detect when services are down and try to recover them - K8s can monitor service status and send email/Slack notifications when any microservice has a problem - Otherwise, one service can die silently, making problems difficult to debug - Very easy to receive updates, simply reload Docker containers Cons: - Small (5-10%) overhead associated with containers - Learning curve for developing infrastructure with K8s can be difficult For the last \"con\", it should be noted that this difficulty applies mainly to application development. Once deployed, it tends to be fairly straightforward to manage services.","title":"Pros/Cons of K8s and Docker"},{"location":"infrastructure/#accessing-k8s","text":"K8s can be accessed and administrated via a GUI by (1) navigating to the K8s platform and selecting Kubernetes in the top-right corner, or (2) connecting via an external K8s management tool on port 8443 (this port should be forwarded when SSHing into the host server). Once the dashboard is loaded, you can click Skip and load the dashboard, which should look like below:","title":"Accessing K8s"},{"location":"infrastructure/#architecture-description","text":"Below is a representation of the microservices and how they interplay with one another. Inside of Kubernetes, there are several resources that describe the infrastructure. There is a single deployment called silimate-platform-k8s-deployment which instantiates a single pod containing five containers: - silimate-platform-frontend which contains NGINX reverse proxy and the frontend service (on port ) - silimate-platform-backend which contains the backend API server - silimate-dashboard which contains the Grafana dashboard with the necessary plugins - silimate-flow which is instantiated twice, with one instance corresponding to the flow scheduler and the other to an API server which powers the CLI and the front-end Besides the deployment, the Docker containers need access to various filesystem resources. This is done with 4 persistent volumes (and associated volume claims), mounted via NFS: - logs-volume which saves backups of the logs in /var/logs inside each container - pdk-volume which mounts the AWS ECR repo containing PDK information at /pdk inside each container - host-volume which mounts the host / at /host to give read-only access to the filesystem inside each container - silimate-volume which mounts the /silimate directory at /silimate inside each container There are a few other noteworthy Kubernetes resources that are instantiated for final setup: - A service called silimate-platform-service , which exposes the frontend - A config map called silimate-config , which sets up customer-specific settings - An ECR secret for retrieving Docker containers from the upstream repository called aws-ecr-secret","title":"Architecture Description"},{"location":"infrastructure/#k8s-make-commands","text":"WIP","title":"K8s Make commands"},{"location":"infrastructure/#installation-guide","text":"Installation simply involves installing Docker and minikube / kubeadm and running the above make commands.","title":"Installation Guide"},{"location":"installing-updates/","text":"Installing Updates Installing updates to the platform's services is very easy. Log into the CAD server and run: cd /silimate/platform-k8s/ sudo make recreate-ecr-secret sudo make redeploy This will fetch the latest Docker containers for the platform and deploy them on Kubernetes.","title":"Installing Updates"},{"location":"installing-updates/#installing-updates","text":"Installing updates to the platform's services is very easy. Log into the CAD server and run: cd /silimate/platform-k8s/ sudo make recreate-ecr-secret sudo make redeploy This will fetch the latest Docker containers for the platform and deploy them on Kubernetes.","title":"Installing Updates"},{"location":"step-building/","text":"Step Building Custom steps can be built in addition to the ones described in Built-In Steps . This can be done by placing a step specification in /silimate/steps on the CAD server. To create a new step, you can create a new directory /silimate/steps/<step_name>/ . Inside of this directory, a file called configure.yml must exist. The contents of this file define the metadata, inputs, outputs, parameters, and commands of the step. Inputs are located at /silimate/steps/<step_name>/inputs/ , outputs are located at /silimate/steps/<step_name>/outputs/ , parameters are exposed as environment variables, and the commands to be executed are continuously shuffled into /silimate/build/<flow_name>/<step_name>/silimate.sh . Below is a prime example: #========================================================================= # Cadence Genus Flow Setup #========================================================================= # Author : Akash Levy # Date : November 1, 2023 #========================================================================= fullname: Cadence Genus Flow Setup category: Logic Synthesis description: Generate a Cadence Genus flow using Flowkit name: cadence-genus-flow-setup container: silimate/eda-docker:latest #------------------------------------------------------------------------- # Inputs and Outputs #------------------------------------------------------------------------- inputs: - constraint_modes.tcl - mmmc_config.pdk.tcl outputs: - config/ - flow/ - setup_genus.log #------------------------------------------------------------------------- # Commands #------------------------------------------------------------------------- commands: - echo Generating the MMMC config file... - cp inputs/mmmc_config.pdk.tcl outputs/mmmc_config.tcl - cat inputs/constraint_modes.tcl >> outputs/mmmc_config.tcl - echo - echo Generating the flow template... - genus -no_gui -f START.tcl -log outputs/setup_genus.log - echo - echo Generating the design_config.tcl file... - cp outputs/design_config.template outputs/design_config.tcl - sed -i 's/read_physical/# read_physical/' outputs/design_config.tcl # TODO: add in physical synthesis support - sed -i 's/<< PLACEHOLDER:\\ PHYSICAL DATA LOAD OPTIONS >>/inputs\\/design.def/' outputs/design_config.tcl - sed -i 's/<< PLACEHOLDER:\\ DESIGN HDL LOAD OPTIONS >>/\\-f inputs\\/rtl\\/design.f/' outputs/design_config.tcl - sed -i 's/<< PLACEHOLDER:\\ ELABORATION OPTIONS >>/'\"$design\"'/' outputs/design_config.tcl - sed -i 's/read_power_intent/# read_power_intent/' outputs/design_config.tcl # TODO: add in UPF support - sed -i 's/<< PLACEHOLDER:\\ POWER INTENT LOAD OPTIONS >>/inputs\\/upf\\/design.upf/' outputs/design_config.tcl - echo - echo Generating the flow_config.tcl file... - cp outputs/flow_config.template outputs/flow_config.tcl - echo - echo Reorganizing outputs... - mv outputs/run_flow.tcl outputs/flow/ - mkdir -p outputs/config/ - mv outputs/*_config.* outputs/config/ #------------------------------------------------------------------------- # Parameters #------------------------------------------------------------------------- parameters: design: top_design_name features: dft_simple Here is the silimate.sh file generated: ln -sf $SILIMATE_BUILD_DIR/gcd-genus-syn/pdk-tsmc22-arm-setup-1699009592822/outputs/constraint_modes.ref.tcl $SILIMATE_BUILD_DIR/gcd-genus-syn/cadence-genus-flow-setup-1699496733809/inputs/constraint_modes.tcl ln -sf $SILIMATE_BUILD_DIR/gcd-genus-syn/pdk-tsmc22-arm-setup-1699009592822/outputs/mmmc_config.pdk.tcl $SILIMATE_BUILD_DIR/gcd-genus-syn/cadence-genus-flow-setup-1699496733809/inputs/mmmc_config.pdk.tcl export design=top_design_name export features=dft_simple export design=gcd export features='' echo Generating the MMMC config file... cp inputs/mmmc_config.pdk.tcl outputs/mmmc_config.tcl cat inputs/constraint_modes.tcl >> outputs/mmmc_config.tcl echo echo Generating the flow template... genus -no_gui -f START.tcl -log outputs/setup_genus.log echo echo Generating the design_config.tcl file... cp outputs/design_config.template outputs/design_config.tcl sed -i 's/read_physical/# read_physical/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ PHYSICAL DATA LOAD OPTIONS >>/inputs\\/design.def/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ DESIGN HDL LOAD OPTIONS >>/\\-f inputs\\/rtl\\/design.f/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ ELABORATION OPTIONS >>/'\"$design\"'/' outputs/design_config.tcl sed -i 's/read_power_intent/# read_power_intent/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ POWER INTENT LOAD OPTIONS >>/inputs\\/upf\\/design.upf/' outputs/design_config.tcl echo echo Generating the flow_config.tcl file... cp outputs/flow_config.template outputs/flow_config.tcl echo echo Reorganizing outputs... mv outputs/run_flow.tcl outputs/flow/ mkdir -p outputs/config/ First, the dependencies are linked from other steps as needed. Next, parameters are exported into the environment. Finally, a sequence of commands is executed to transform the inputs in the inputs/ directory to outputs in the outputs/ directory. Breakdown of configure.yml fullname : proper title of step that is printed on the node in the web UI category : what category of functionality the step has (categories can be added/removed by modifying /silimate/steps/categories ) description : a description of what the step does name : name of the step (cannot include spaces) container : (optional) which Docker container to use to run the commands--if missing, run on bare-metal, if possible trigger : (optional) specify all_done as the value to run even if input dependencies are failing; often good for debug steps inputs : list of expected inputs in the inputs/ directory, will appear as input handles on node outputs : list of expected outputs in the outputs/ directory, will appear as output handles on node commands : list of commands to run to transform inputs into outputs parameters : list of configuration knobs to modify the behavior of the tool according to what the user wants Containerization and Access to Data in Steps When containers are instantiated, they receive read/write access to the /silimate/ directory on the CAD server, read access to / on the CAD server (mounts at /host in container), read access to the PDK directory (mounts at /pdk ). The file /silimate/setup.sh is always run to initialize the container. This script should be used to load all of the relevant CAD tools into the environment. Log/Metrics API Steps may add logs/metrics to the log/metrics warehouse, to be queried later. To do this, a RESTful API is available. Posting a log file POST JSON data to http://localhost/api/logs such as follows: [ { \"flow\": \"flow_name\", \"run\": \"flow_run\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"log\": \"log_line_1\" }, { \"flow\": \"flow_name\", \"run\": \"flow_run\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"log\": \"log_line_2\" } ] Posting metrics POST JSON data to http://localhost/api/metrics such as follows: [ { \"design_name\": \"name_of_design\", \"flow\": \"flow_name\", \"run\": \"flow_run\", \"step\": \"which_flow_step_the_metric_was_generated_by\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"metric\": \"metric_1_name\", \"value\": 12.3456 }, { \"design_name\": \"name_of_design\", \"flow\": \"flow_name\", \"run\": \"flow_run\", \"step\": \"which_flow_step_the_metric_was_generated_by\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"metric\": \"metric_2_name\", \"value\": 12.3456 } ]","title":"Step Building"},{"location":"step-building/#step-building","text":"Custom steps can be built in addition to the ones described in Built-In Steps . This can be done by placing a step specification in /silimate/steps on the CAD server. To create a new step, you can create a new directory /silimate/steps/<step_name>/ . Inside of this directory, a file called configure.yml must exist. The contents of this file define the metadata, inputs, outputs, parameters, and commands of the step. Inputs are located at /silimate/steps/<step_name>/inputs/ , outputs are located at /silimate/steps/<step_name>/outputs/ , parameters are exposed as environment variables, and the commands to be executed are continuously shuffled into /silimate/build/<flow_name>/<step_name>/silimate.sh . Below is a prime example: #========================================================================= # Cadence Genus Flow Setup #========================================================================= # Author : Akash Levy # Date : November 1, 2023 #========================================================================= fullname: Cadence Genus Flow Setup category: Logic Synthesis description: Generate a Cadence Genus flow using Flowkit name: cadence-genus-flow-setup container: silimate/eda-docker:latest #------------------------------------------------------------------------- # Inputs and Outputs #------------------------------------------------------------------------- inputs: - constraint_modes.tcl - mmmc_config.pdk.tcl outputs: - config/ - flow/ - setup_genus.log #------------------------------------------------------------------------- # Commands #------------------------------------------------------------------------- commands: - echo Generating the MMMC config file... - cp inputs/mmmc_config.pdk.tcl outputs/mmmc_config.tcl - cat inputs/constraint_modes.tcl >> outputs/mmmc_config.tcl - echo - echo Generating the flow template... - genus -no_gui -f START.tcl -log outputs/setup_genus.log - echo - echo Generating the design_config.tcl file... - cp outputs/design_config.template outputs/design_config.tcl - sed -i 's/read_physical/# read_physical/' outputs/design_config.tcl # TODO: add in physical synthesis support - sed -i 's/<< PLACEHOLDER:\\ PHYSICAL DATA LOAD OPTIONS >>/inputs\\/design.def/' outputs/design_config.tcl - sed -i 's/<< PLACEHOLDER:\\ DESIGN HDL LOAD OPTIONS >>/\\-f inputs\\/rtl\\/design.f/' outputs/design_config.tcl - sed -i 's/<< PLACEHOLDER:\\ ELABORATION OPTIONS >>/'\"$design\"'/' outputs/design_config.tcl - sed -i 's/read_power_intent/# read_power_intent/' outputs/design_config.tcl # TODO: add in UPF support - sed -i 's/<< PLACEHOLDER:\\ POWER INTENT LOAD OPTIONS >>/inputs\\/upf\\/design.upf/' outputs/design_config.tcl - echo - echo Generating the flow_config.tcl file... - cp outputs/flow_config.template outputs/flow_config.tcl - echo - echo Reorganizing outputs... - mv outputs/run_flow.tcl outputs/flow/ - mkdir -p outputs/config/ - mv outputs/*_config.* outputs/config/ #------------------------------------------------------------------------- # Parameters #------------------------------------------------------------------------- parameters: design: top_design_name features: dft_simple Here is the silimate.sh file generated: ln -sf $SILIMATE_BUILD_DIR/gcd-genus-syn/pdk-tsmc22-arm-setup-1699009592822/outputs/constraint_modes.ref.tcl $SILIMATE_BUILD_DIR/gcd-genus-syn/cadence-genus-flow-setup-1699496733809/inputs/constraint_modes.tcl ln -sf $SILIMATE_BUILD_DIR/gcd-genus-syn/pdk-tsmc22-arm-setup-1699009592822/outputs/mmmc_config.pdk.tcl $SILIMATE_BUILD_DIR/gcd-genus-syn/cadence-genus-flow-setup-1699496733809/inputs/mmmc_config.pdk.tcl export design=top_design_name export features=dft_simple export design=gcd export features='' echo Generating the MMMC config file... cp inputs/mmmc_config.pdk.tcl outputs/mmmc_config.tcl cat inputs/constraint_modes.tcl >> outputs/mmmc_config.tcl echo echo Generating the flow template... genus -no_gui -f START.tcl -log outputs/setup_genus.log echo echo Generating the design_config.tcl file... cp outputs/design_config.template outputs/design_config.tcl sed -i 's/read_physical/# read_physical/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ PHYSICAL DATA LOAD OPTIONS >>/inputs\\/design.def/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ DESIGN HDL LOAD OPTIONS >>/\\-f inputs\\/rtl\\/design.f/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ ELABORATION OPTIONS >>/'\"$design\"'/' outputs/design_config.tcl sed -i 's/read_power_intent/# read_power_intent/' outputs/design_config.tcl sed -i 's/<< PLACEHOLDER:\\ POWER INTENT LOAD OPTIONS >>/inputs\\/upf\\/design.upf/' outputs/design_config.tcl echo echo Generating the flow_config.tcl file... cp outputs/flow_config.template outputs/flow_config.tcl echo echo Reorganizing outputs... mv outputs/run_flow.tcl outputs/flow/ mkdir -p outputs/config/ First, the dependencies are linked from other steps as needed. Next, parameters are exported into the environment. Finally, a sequence of commands is executed to transform the inputs in the inputs/ directory to outputs in the outputs/ directory.","title":"Step Building"},{"location":"step-building/#breakdown-of-configureyml","text":"fullname : proper title of step that is printed on the node in the web UI category : what category of functionality the step has (categories can be added/removed by modifying /silimate/steps/categories ) description : a description of what the step does name : name of the step (cannot include spaces) container : (optional) which Docker container to use to run the commands--if missing, run on bare-metal, if possible trigger : (optional) specify all_done as the value to run even if input dependencies are failing; often good for debug steps inputs : list of expected inputs in the inputs/ directory, will appear as input handles on node outputs : list of expected outputs in the outputs/ directory, will appear as output handles on node commands : list of commands to run to transform inputs into outputs parameters : list of configuration knobs to modify the behavior of the tool according to what the user wants","title":"Breakdown of configure.yml"},{"location":"step-building/#containerization-and-access-to-data-in-steps","text":"When containers are instantiated, they receive read/write access to the /silimate/ directory on the CAD server, read access to / on the CAD server (mounts at /host in container), read access to the PDK directory (mounts at /pdk ). The file /silimate/setup.sh is always run to initialize the container. This script should be used to load all of the relevant CAD tools into the environment.","title":"Containerization and Access to Data in Steps"},{"location":"step-building/#logmetrics-api","text":"Steps may add logs/metrics to the log/metrics warehouse, to be queried later. To do this, a RESTful API is available.","title":"Log/Metrics API"},{"location":"step-building/#posting-a-log-file","text":"POST JSON data to http://localhost/api/logs such as follows: [ { \"flow\": \"flow_name\", \"run\": \"flow_run\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"log\": \"log_line_1\" }, { \"flow\": \"flow_name\", \"run\": \"flow_run\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"log\": \"log_line_2\" } ]","title":"Posting a log file"},{"location":"step-building/#posting-metrics","text":"POST JSON data to http://localhost/api/metrics such as follows: [ { \"design_name\": \"name_of_design\", \"flow\": \"flow_name\", \"run\": \"flow_run\", \"step\": \"which_flow_step_the_metric_was_generated_by\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"metric\": \"metric_1_name\", \"value\": 12.3456 }, { \"design_name\": \"name_of_design\", \"flow\": \"flow_name\", \"run\": \"flow_run\", \"step\": \"which_flow_step_the_metric_was_generated_by\", \"name\": \"name_of_step_that_generated_the_logs\", \"time\": \"seconds_since_epoch\", \"metric\": \"metric_2_name\", \"value\": 12.3456 } ]","title":"Posting metrics"}]}